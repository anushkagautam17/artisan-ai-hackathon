# backend/services/vision.py
import io
from PIL import Image
from collections import Counter

def _simple_image_info(image: Image.Image):
    # dominant color + size category
    small = image.resize((50, 50))
    pixels = list(small.getdata())
    dominant = Counter(pixels).most_common(1)[0][0]  # (r,g,b)
    dominant_color = f"RGB{dominant}"
    width, height = image.size
    area = width * height
    size_category = "small" if area < 2500 else "medium" if area < 10000 else "large"
    return dominant_color, size_category, width, height

def analyze_image_bytes(image_bytes: bytes):
    """
    Input: raw image bytes
    Returns: dict with keys:
      - caption (str)  : a short caption generated by BLIP if available, else a fallback
      - keywords (list[str]) : short keywords extracted from caption
      - dominant_color (str)
      - size_category (str)
      - width, height (int)
    Notes: BLIP download requires internet and the `transformers` package. If BLIP isn't available,
    this function will return a simple fallback caption and the color/size info derived with PIL.
    """
    # open PIL image
    image = Image.open(io.BytesIO(image_bytes)).convert("RGB")

    caption = None
    keywords = []

    # Try BLIP (optional): will require transformers & torch & internet for first run
    try:
        from transformers import BlipProcessor, BlipForConditionalGeneration
        processor = BlipProcessor.from_pretrained("Salesforce/blip-image-captioning-base")
        model = BlipForConditionalGeneration.from_pretrained("Salesforce/blip-image-captioning-base")
        inputs = processor(image, return_tensors="pt")
        out = model.generate(**inputs, max_new_tokens=50)
        caption = processor.decode(out[0], skip_special_tokens=True)
        # simple keywords: split words >3 chars, unique
        words = [w.strip(".,()").lower() for w in caption.split() if len(w.strip(".,()")) > 3]
        seen = []
        for w in words:
            if w not in seen:
                seen.append(w)
            if len(seen) >= 8:
                break
        keywords = seen
    except Exception:
        # fallback simple caption
        caption = "handmade product (image unclear for detailed caption)"
        keywords = []

    dominant_color, size_category, width, height = _simple_image_info(image)
    return {
        "caption": caption,
        "keywords": keywords,
        "dominant_color": dominant_color,
        "size_category": size_category,
        "width": width,
        "height": height
    }
